Contexto
Sistema de gest√£o de vagas desenvolvido em Flask + HTML/JS, com funcionalidades j√° implementadas como cria√ß√£o, contrata√ß√£o, congelamento e reativa√ß√£o de vagas. O backend roda localmente em http://localhost:5001.

Funcionalidades a Implementar
1. Mensagem personalizada na contrata√ß√£o com notifica√ß√µes para candidatos
No modal de contrata√ß√£o, deve ser inclu√≠do um campo onde a empresa possa digitar uma mensagem personalizada para o candidato.

Essa mensagem deve ser enviada ao backend junto com a a√ß√£o de contrata√ß√£o.

A mensagem ser√° armazenada no banco de dados associada ao candidato contratado, √† vaga e √† empresa.

Ap√≥s o candidato fazer login, no frontend dele deve aparecer:

Um √≠cone de sino para notifica√ß√µes no topo da tela.

Um indicador visual (badge) no sino se houver mensagens n√£o lidas.

Ao clicar no sino, deve abrir um painel suspenso ou p√°gina que liste todas as mensagens recebidas.

Cada mensagem deve exibir: t√≠tulo, nome da vaga, nome da empresa, conte√∫do da mensagem e data/hora de envio.

As notifica√ß√µes devem poder ser marcadas como lidas para remover o indicador.

Banco de dados: criar tabela notificacoes com colunas id, id_candidato, mensagem, vaga_id, empresa_id, data_envio, lida.

2. Melhorar filtros de status de vagas (usabilidade e acessibilidade)
Os filtros de vagas (Todas, Ativas, Congeladas, Conclu√≠das) devem ficar visualmente mais claros:

O filtro selecionado deve ser destacado (exemplo: cor de fundo diferente, borda, fonte em negrito).

Os filtros n√£o selecionados devem ter apar√™ncia neutra.

Usar classes CSS como .filtro-ativo para gerenciar o destaque.

Os filtros devem ser acess√≠veis via teclado e compat√≠veis com leitores de tela (incluir ARIA labels).

3. Integra√ß√£o de API de acessibilidade para deficientes visuais
Integrar API ou biblioteca para melhorar a acessibilidade:

Exemplos: VLibras (l√≠ngua de sinais), axe-core (verifica√ß√£o autom√°tica), accessibility.js (compatibilidade com leitores de tela).

Adicionar suporte ARIA nos bot√µes, filtros, formul√°rios e elementos interativos.

Garantir navega√ß√£o por teclado e foco vis√≠vel.

Incluir plugin VLibras no HTML principal para tradu√ß√£o em linguagem de sinais.

4. Ajustes na interface e funcionalidades para vagas ‚ÄúConclu√≠das‚Äù
Para vagas com status Conclu√≠da:

Remover bot√µes "Editar" e "Encerrar".

Manter somente bot√£o "Ver Candidatos".

Adicionar um bloco de feedback gerado por IA contendo informa√ß√µes como:

Nome do candidato selecionado.

Data de sele√ß√£o.

Posi√ß√£o no ranking dos candidatos na contrata√ß√£o.

Exemplo de mensagem de feedback:

‚úÖ O candidato Jo√£o Silva foi selecionado em 22/07/2025.
üìä Ele estava em 2¬∫ lugar no ranking de candidatos quando foi contratado.

5. Exibi√ß√£o de vagas para candidatos: mostrar somente vagas ‚ÄúAtivas‚Äù
Para o painel e listagem de vagas acessada por candidatos, deve ser exibida somente vagas com status ‚ÄúAtiva‚Äù.

Vagas com status ‚ÄúCongelada‚Äù ou ‚ÄúConclu√≠da‚Äù n√£o devem ser exibidas para candidatos.

Garantir essa regra tanto no backend (filtro nas consultas) quanto no frontend (renderiza√ß√£o da lista).

Objetivo: candidatos s√≥ visualizam vagas realmente abertas para inscri√ß√µes.

6. Tela detalhada da vaga para candidatos
Ao clicar em uma vaga na lista de candidaturas, o candidato deve ver um painel com:

Detalhes completos da vaga (descri√ß√£o, tipo ‚Äî presencial, h√≠brido ‚Äî endere√ßo, requisitos).

Informa√ß√µes sobre a empresa contratante.

Como foi calculado o score do candidato para essa vaga (crit√©rio, mas sem exibir crit√©rios confidenciais/diferenciais).

O painel deve ser claro, intuitivo e responsivo.

Permitir que o candidato visualize todas as informa√ß√µes relevantes para tomar a decis√£o de se candidatar.

7. Campos adicionais na cria√ß√£o e listagem de vagas
Na cria√ß√£o da vaga, incluir campo para listar Desej√°veis (Diferenciais):

Habilidades extras que d√£o vantagem ao candidato (ex: ingl√™s fluente, certifica√ß√µes espec√≠ficas, experi√™ncia em setores similares).

Esses crit√©rios s√£o confidenciais e n√£o devem ser exibidos para candidatos, apenas para a empresa.

Na listagem de vagas para a empresa:

Mostrar o tipo da vaga (Presencial, H√≠brida).

Mostrar o endere√ßo da vaga.

Mostrar status atualizado corretamente.

Na listagem para candidatos, exibir somente vagas ativas com informa√ß√µes relevantes e sem os diferenciais confidenciais.

Importante: Na an√°lise de IA para determina√ß√£o do score do candidato, os diferenciais listados devem contribuir para diferenciar candidatos com vantagem competitiva, ajudando a destacar aqueles que atendem ou superam esses crit√©rios desej√°veis, sem expor esses crit√©rios diretamente ao candidato.


8. Ajuste bot√£o cancelar candidatura para que funcione 

Considera√ß√µes T√©cnicas e Boas Pr√°ticas
Garantir c√≥digo limpo, organizado e modular para facilitar manuten√ß√£o.

Testar cada funcionalidade isoladamente e no fluxo completo do sistema.

Garantir que n√£o haja erros no console do navegador.

Garantir acessibilidade, responsividade e boa experi√™ncia para todos os usu√°rios.

Registrar logs adequados no backend para monitoramento de a√ß√µes importantes.